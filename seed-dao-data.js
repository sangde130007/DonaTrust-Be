const { User, Charity, Campaign, DaoApplication, CampaignVote } = require('./src/models/associations');
const sequelize = require('./src/config/database');

async function seedDaoData() {
  try {
    console.log('üå± Starting to seed DAO data...');

    // 1. Create Users
    const users = await User.bulkCreate([
      {
        user_id: 'user001',
        full_name: 'Nguy·ªÖn VƒÉn A',
        email: 'user001@example.com',
        password: '$2b$10$example_hash', // In production, use proper hashing
        role: 'user',
        status: 'active'
      },
      {
        user_id: 'user002',
        full_name: 'Tr·∫ßn Th·ªã B',
        email: 'user002@example.com',
        password: '$2b$10$example_hash',
        role: 'user',
        status: 'active'
      },
      {
        user_id: 'dao_member001',
        full_name: 'DAO Member 1',
        email: 'dao1@example.com',
        password: '$2b$10$example_hash',
        role: 'dao_member',
        status: 'active'
      },
      {
        user_id: 'dao_member002',
        full_name: 'DAO Member 2',
        email: 'dao2@example.com',
        password: '$2b$10$example_hash',
        role: 'dao_member',
        status: 'active'
      }
    ], { ignoreDuplicates: true });

    console.log('‚úÖ Users created');

    // 2. Create Charities
    const charities = await Charity.bulkCreate([
      {
        charity_id: 'charity001',
        user_id: 'user001',
        name: 'Qu·ªπ t·ª´ thi·ªán ABC',
        description: 'T·ªï ch·ª©c t·ª´ thi·ªán uy t√≠n v·ªõi nhi·ªÅu nƒÉm ho·∫°t ƒë·ªông',
        email: 'charity@abc.com',
        phone: '0123456789',
        verification_status: 'verified'
      },
      {
        charity_id: 'charity002',
        user_id: 'user002',
        name: 'Qu·ªπ t·ª´ thi·ªán XYZ',
        description: 'T·ªï ch·ª©c t·ª´ thi·ªán m·ªõi v·ªõi nhi·ªÅu d·ª± √°n √Ω nghƒ©a',
        email: 'charity@xyz.com',
        phone: '0987654321',
        verification_status: 'verified'
      }
    ], { ignoreDuplicates: true });

    console.log('‚úÖ Charities created');

    // 3. Create Campaigns
    const campaigns = await Campaign.bulkCreate([
      {
        campaign_id: 'campaign001',
        charity_id: 'charity001',
        title: 'X√¢y tr∆∞·ªùng h·ªçc v√πng cao',
        description: 'D·ª± √°n x√¢y d·ª±ng tr∆∞·ªùng h·ªçc cho tr·∫ª em v√πng cao t·∫°i S∆°n La. D·ª± √°n s·∫Ω cung c·∫•p c∆° s·ªü v·∫≠t ch·∫•t h·ªçc t·∫≠p t·ªët cho h∆°n 200 h·ªçc sinh.',
        detailed_description: 'Chi ti·∫øt d·ª± √°n bao g·ªìm:\n- X√¢y d·ª±ng 5 ph√≤ng h·ªçc\n- Th∆∞ vi·ªán v·ªõi 1000 ƒë·∫ßu s√°ch\n- S√¢n ch∆°i v√† nh√† v·ªá sinh\n- ƒê√†o t·∫°o gi√°o vi√™n ƒë·ªãa ph∆∞∆°ng',
        goal_amount: 500000000,
        category: 'education',
        location: 'S∆°n La',
        status: 'pending',
        approval_status: 'pending',
        dao_approval_status: 'pending',
        beneficiaries: '200 h·ªçc sinh v√πng cao',
        expected_impact: 'N√¢ng cao ch·∫•t l∆∞·ª£ng gi√°o d·ª•c cho tr·∫ª em v√πng cao'
      },
      {
        campaign_id: 'campaign002',
        charity_id: 'charity002',
        title: 'H·ªó tr·ª£ y t·∫ø cho ng∆∞·ªùi ngh√®o',
        description: 'Cung c·∫•p d·ªãch v·ª• y t·∫ø mi·ªÖn ph√≠ cho ng∆∞·ªùi d√¢n ngh√®o t·∫°i H√† N·ªôi. D·ª± √°n s·∫Ω t·ªï ch·ª©c c√°c bu·ªïi kh√°m b·ªánh v√† c·∫•p thu·ªëc mi·ªÖn ph√≠.',
        detailed_description: 'D·ª± √°n bao g·ªìm:\n- Kh√°m b·ªánh mi·ªÖn ph√≠ cho 500 ng∆∞·ªùi\n- C·∫•p thu·ªëc c∆° b·∫£n\n- T∆∞ v·∫•n dinh d∆∞·ª°ng\n- Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥',
        goal_amount: 300000000,
        category: 'health',
        location: 'H√† N·ªôi',
        status: 'pending',
        approval_status: 'pending',
        dao_approval_status: 'pending',
        beneficiaries: '500 ng∆∞·ªùi d√¢n ngh√®o',
        expected_impact: 'C·∫£i thi·ªán s·ª©c kh·ªèe c·ªông ƒë·ªìng'
      },
      {
        campaign_id: 'campaign003',
        charity_id: 'charity001',
        title: 'B·∫£o v·ªá m√¥i tr∆∞·ªùng',
        description: 'D·ª± √°n tr·ªìng c√¢y v√† b·∫£o v·ªá m√¥i tr∆∞·ªùng t·∫°i TP.HCM. D·ª± √°n s·∫Ω tr·ªìng 1000 c√¢y xanh v√† t·ªï ch·ª©c c√°c ho·∫°t ƒë·ªông b·∫£o v·ªá m√¥i tr∆∞·ªùng.',
        detailed_description: 'Ho·∫°t ƒë·ªông bao g·ªìm:\n- Tr·ªìng 1000 c√¢y xanh\n- T·ªï ch·ª©c c√°c bu·ªïi d·ªçn r√°c\n- Gi√°o d·ª•c m√¥i tr∆∞·ªùng cho h·ªçc sinh\n- T·∫°o kh√¥ng gian xanh cho c·ªông ƒë·ªìng',
        goal_amount: 200000000,
        category: 'environment',
        location: 'TP.HCM',
        status: 'pending',
        approval_status: 'pending',
        dao_approval_status: 'pending',
        beneficiaries: 'C·ªông ƒë·ªìng TP.HCM',
        expected_impact: 'C·∫£i thi·ªán m√¥i tr∆∞·ªùng v√† n√¢ng cao √Ω th·ª©c b·∫£o v·ªá m√¥i tr∆∞·ªùng'
      }
    ], { ignoreDuplicates: true });

    console.log('‚úÖ Campaigns created');

    // 4. Create DAO Applications
    const daoApplications = await DaoApplication.bulkCreate([
      {
        application_id: 'dao_app001',
        user_id: 'dao_member001',
        full_name: 'DAO Member 1',
        email: 'dao1@example.com',
        introduction: 'T√¥i l√† m·ªôt chuy√™n gia trong lƒ©nh v·ª±c t·ª´ thi·ªán v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám. T√¥i ƒë√£ tham gia v√† qu·∫£n l√Ω nhi·ªÅu d·ª± √°n t·ª´ thi·ªán c√≥ t√°c ƒë·ªông t√≠ch c·ª±c ƒë·∫øn c·ªông ƒë·ªìng.',
        experience: 'ƒê√£ tham gia nhi·ªÅu d·ª± √°n t·ª´ thi·ªán v√† c√≥ hi·ªÉu bi·∫øt s√¢u r·ªông v·ªÅ qu·∫£n tr·ªã phi t·∫≠p trung. T√¥i c√≥ kinh nghi·ªám trong vi·ªác ƒë√°nh gi√° t√≠nh kh·∫£ thi v√† t√°c ƒë·ªông c·ªßa c√°c d·ª± √°n t·ª´ thi·ªán.',
        areas_of_interest: {
          education: true,
          health: true,
          environment: false,
          poverty: true,
          disaster: false,
          children: true,
          elderly: false,
          disability: true,
          animals: false,
          community: true
        },
        status: 'approved'
      },
      {
        application_id: 'dao_app002',
        user_id: 'dao_member002',
        full_name: 'DAO Member 2',
        email: 'dao2@example.com',
        introduction: 'Chuy√™n gia v·ªÅ blockchain v√† qu·∫£n tr·ªã phi t·∫≠p trung v·ªõi ƒëam m√™ v·ªÅ c√°c d·ª± √°n c√≥ t√°c ƒë·ªông x√£ h·ªôi t√≠ch c·ª±c.',
        experience: 'C√≥ kinh nghi·ªám trong vi·ªác ƒë√°nh gi√° v√† qu·∫£n l√Ω c√°c d·ª± √°n t·ª´ thi·ªán. T√¥i hi·ªÉu r√µ v·ªÅ c√°c ti√™u ch√≠ ƒë√°nh gi√° v√† c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa c√°c t·ªï ch·ª©c t·ª´ thi·ªán.',
        areas_of_interest: {
          education: true,
          health: false,
          environment: true,
          poverty: true,
          disaster: true,
          children: false,
          elderly: true,
          disability: false,
          animals: true,
          community: true
        },
        status: 'approved'
      }
    ], { ignoreDuplicates: true });

    console.log('‚úÖ DAO Applications created');

    // 5. Create some sample votes (optional)
    const votes = await CampaignVote.bulkCreate([
      {
        vote_id: 'vote001',
        campaign_id: 'campaign001',
        voter_id: 'dao_member001',
        vote_decision: 'approve',
        vote_reason: 'Campaign c√≥ m·ª•c ti√™u r√µ r√†ng v√† kh·∫£ thi. D·ª± √°n s·∫Ω c√≥ t√°c ƒë·ªông t√≠ch c·ª±c ƒë·∫øn gi√°o d·ª•c v√πng cao.'
      },
      {
        vote_id: 'vote002',
        campaign_id: 'campaign001',
        voter_id: 'dao_member002',
        vote_decision: 'approve',
        vote_reason: 'D·ª± √°n c√≥ t√°c ƒë·ªông t√≠ch c·ª±c ƒë·∫øn c·ªông ƒë·ªìng v√† ƒë∆∞·ª£c l·∫≠p k·∫ø ho·∫°ch chi ti·∫øt.'
      }
    ], { ignoreDuplicates: true });

    console.log('‚úÖ Sample votes created');

    console.log('üéâ DAO data seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`- Users: ${users.length}`);
    console.log(`- Charities: ${charities.length}`);
    console.log(`- Campaigns: ${campaigns.length}`);
    console.log(`- DAO Applications: ${daoApplications.length}`);
    console.log(`- Sample Votes: ${votes.length}`);

    console.log('\nüîó You can now:');
    console.log('1. Login as DAO member (dao1@example.com or dao2@example.com)');
    console.log('2. Visit /dao/campaigns/pending to see campaigns for voting');
    console.log('3. Vote on campaigns at /dao/campaigns/:id');

  } catch (error) {
    console.error('‚ùå Error seeding DAO data:', error);
  } finally {
    await sequelize.close();
  }
}

// Run the seeding
seedDaoData();