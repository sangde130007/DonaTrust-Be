const { AppError } = require('../utils/errorHandler');
const Charity = require('../models/Charity');
const Campaign = require('../models/Campaign'); // üëà NEW

/**
 * Generic role guard
 * @param {string|string[]} allowedRoles
 */
const requireRole = (allowedRoles) => {
  const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];
  return (req, res, next) => {
    if (!req.user) return next(new AppError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p', 401));
    if (!roles.includes(req.user.role)) {
      return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y', 403));
    }
    next();
  };
};

/**
 * Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu charity:
 * - admin: pass
 * - charity: ch·ªâ thao t√°c charity c·ªßa ch√≠nh m√¨nh (g·∫Øn req.userCharity)
 */
const requireCharityOwnership = async (req, res, next) => {
  try {
    if (!req.user) return next(new AppError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p', 401));

    if (req.user.role === 'admin') return next();

    if (req.user.role === 'charity') {
      const charity = await Charity.findOne({ where: { user_id: req.user.user_id } });
      if (!charity) return next(new AppError('B·∫°n ch∆∞a ƒëƒÉng k√Ω l√†m t·ªï ch·ª©c t·ª´ thi·ªán', 403));
      req.userCharity = charity;
      return next();
    }

    return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y', 403));
  } catch (error) {
    next(error);
  }
};

/**
 * requireCharity:
 * - admin: pass
 * - charity: n·∫øu token thi·∫øu charity_id -> fallback DB theo user_id, g·∫Øn req.user.charity_id
 */
const requireCharity = async (req, res, next) => {
  try {
    const u = req.user;
    if (!u) return next(new AppError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p', 401));

    // Admin pass
    if (u.role === 'admin') return next();

    // Kh√¥ng ph·∫£i charity
    if (u.role !== 'charity') {
      return next(new AppError('Kh√¥ng c√≥ quy·ªÅn charity', 403));
    }

    // Token ƒë√£ c√≥ charity_id -> pass
    if (u.charity_id || u?.charity?.charity_id) {
      req.user.charity_id = u.charity_id || u?.charity?.charity_id;
      return next();
    }

    // Fallback DB
    if (u.user_id) {
      const row = await Charity.findOne({
        where: { user_id: u.user_id },
        attributes: ['charity_id'],
      });
      if (row?.charity_id) {
        req.user.charity_id = row.charity_id;
        return next();
      }
    }

    return next(new AppError('T√†i kho·∫£n charity ch∆∞a li√™n k·∫øt v·ªõi t·ªï ch·ª©c', 403));
  } catch (err) {
    next(err);
  }
};

/**
 * NEW: isCampaignOwner
 * - Cho ph√©p: admin
 * - N·∫øu campaign c√≥ c√°c tr∆∞·ªùng owner kh·∫£ dƒ© (owner_id/created_by/creator_id/owner.user_id/charity_owner_id)
 *   th√¨ so s√°nh tr·ª±c ti·∫øp v·ªõi req.user.user_id
 * - N·∫øu kh√¥ng, map qua Charity b·∫±ng campaign.charity_id -> charity.user_id
 * - G·∫Øn req.campaign ƒë·ªÉ controller d√πng l·∫°i
 */
const isCampaignOwner = async (req, res, next) => {
  try {
    if (!req.user) return next(new AppError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p', 401));
    const userId = String(req.user.user_id || req.user.id || '');
    if (!userId) return next(new AppError('Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng', 401));

    if (req.user.role === 'admin') return next(); // admin pass

    const campaignId = req.params.id;
    const campaign = await Campaign.findOne({ where: { campaign_id: campaignId } });
    if (!campaign) return next(new AppError('Kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch', 404));

    const ownerCandidates = [
      campaign.owner_id,
      campaign.created_by,
      campaign.creator_id,
      campaign?.owner?.user_id,
      campaign.charity_owner_id,
    ].filter(Boolean).map(String);

    if (ownerCandidates.length && ownerCandidates.includes(userId)) {
      req.campaign = campaign;
      return next();
    }

    if (campaign.charity_id) {
      const charity = await Charity.findOne({ where: { charity_id: campaign.charity_id }, attributes: ['user_id'] });
      if (charity?.user_id && String(charity.user_id) === userId) {
        req.campaign = campaign;
        return next();
      }
    }

    return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng c·∫≠p nh·∫≠t cho chi·∫øn d·ªãch n√†y.', 403));
  } catch (err) {
    next(err);
  }
};

module.exports = {
  // core
  requireRole,
  requireCharityOwnership,
  requireCharity,

  // shortcuts
  requireAdmin: requireRole('admin'),
  requireDonor: requireRole(['donor', 'admin']),
  requireCharityOnly: requireRole('charity'),
  requireCharityOrAdmin: requireRole(['charity', 'admin']),

  // NEW export
  isCampaignOwner,
};
